name: 🚀 Action Release Pipeline

# Global permissions for the workflow
permissions:
  contents: write    # Required for creating releases and updating README
  actions: read      # Required to read workflow status
  pull-requests: read # Required for reading PR information

on:
  # Automatic trigger on push to main/master branches
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  # Manual trigger for action releases
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - 'patch'
        - 'minor'
        - 'major'
      force-release:
        description: 'Force release even if no changes'
        required: false
        default: false
        type: boolean
      test-scope:
        description: 'Scope of tests to run before release'
        required: false
        default: 'full'
        type: choice
        options:
        - 'full'
        - 'security-only'
        - 'integration-only'
        - 'cross-platform-only'

jobs:
  # 🧪 First run ALL tests - Release ONLY if tests pass!
  run-tests:
    name: 🧪 Run Action Release Tests
    uses: ./.github/workflows/release_action_test.yml
    with:
      test-scope: ${{ inputs.test-scope || 'full' }}
    permissions:
      contents: write  # Required for badge updates to README
      actions: read    # Required to read workflow status
      pull-requests: read  # Required for PR information
    secrets: inherit  # Pass all secrets to the reusable workflow
    
  # 📦 Release job depends on successful tests
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: run-tests
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (needs.run-tests.outputs.test-success == 'true' || github.event.inputs.force-release == 'true')
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⬆️ Analyze next version
        id: version
        uses: GrexyLoco/K.Actions.NextVersion@latest
        with:
          branchName: ${{ github.ref_name }}

      - name: 📝 Generate Changelog
        id: changelog
        shell: pwsh
        run: |
          Write-Host "📝 Generating changelog..." -ForegroundColor Cyan
          
          $version = '${{ steps.version.outputs.version }}'
          $latestTag = git describe --tags --abbrev=0 2>$null
          
          if ($latestTag) {
              $commits = git log --pretty=format:"- %s" "$latestTag..HEAD"
          } else {
              $commits = git log --pretty=format:"- %s"
          }
          
          $changelog = @"
          ## What's Changed in $version
          
          ### 🚀 Features & Improvements
          $($commits -join "`n")
          
          ### 🛡️ Action Capabilities
          - **Security Scanning**: GitLeaks + Super-Linter
          - **PowerShell Testing**: Pester v5 with code coverage
          - **Enhanced Reporting**: Rich GitHub step summaries
          - **Enterprise Ready**: Fully parametrized for reuse
          
          ### 📋 Usage
          \`\`\`yaml
          - name: Validate PowerShell Module
            uses: GrexyLoco/K.Actions.PSModuleValidation@$version
            with:
              github-token: \${{ secrets.GITHUB_TOKEN }}
              module-name: 'YourModule'
          \`\`\`
          
          **Full Changelog**: https://github.com/GrexyLoco/K.Actions.PSModuleValidation/compare/$latestTag...$version
          "@
          
          # Escape for GitHub output
          $changelog = $changelog -replace '"','\"' -replace '\r?\n','%0A'
          Write-Output "changelog=$changelog" >> $env:GITHUB_OUTPUT

      - name: 🏷️ Create Release Tag
        shell: pwsh
        run: |
          $version = '${{ steps.version.outputs.version }}'
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a $version -m "🚀 Release $version

          Automated release of K.Actions.PSModuleValidation
          
          Features:
          - Comprehensive PowerShell module validation
          - Security scanning with GitLeaks and Super-Linter  
          - Pester v5 testing with code coverage
          - Enhanced GitHub step summaries
          - Enterprise-ready parametrization"
          
          git push origin $version

      - name: 📦 Create GitHub Release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $changelog = '${{ steps.changelog.outputs.changelog }}'
          
          # Create release using GitHub CLI
          gh release create $version --title "🚀 K.Actions.PSModuleValidation $version" --notes "$changelog"

      - name: 📋 Generate Release Summary
        if: always()
        shell: pwsh
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $testSuccess = '${{ needs.run-tests.outputs.test-success }}'
          
          $summary = @"
          ## 🚀 Release Complete - $version
          
          ### 📊 Release Status
          **Version:** $version
          **Tests:** $(if ($testSuccess -eq 'true') { '✅ PASSED' } else { '❌ FAILED' })
          **Status:** $(if ($testSuccess -eq 'true') { '✅ RELEASED' } else { '❌ BLOCKED' })
          
          ### 🎯 Action Features
          - 🛡️ **Security Scanning** - GitLeaks & Super-Linter
          - 🧪 **PowerShell Testing** - Pester v5 with coverage
          - 📊 **Rich Reporting** - Enhanced GitHub summaries
          - ⚙️ **Configurable** - Enterprise-ready parameters
          
          ### 📋 Usage Instructions
          \`\`\`yaml
          uses: GrexyLoco/K.Actions.PSModuleValidation@$version
          \`\`\`
          
          ### 🔗 Links
          - **Repository**: https://github.com/GrexyLoco/K.Actions.PSModuleValidation
          - **Release**: https://github.com/GrexyLoco/K.Actions.PSModuleValidation/releases/tag/$version
          - **Documentation**: https://github.com/GrexyLoco/K.Actions.PSModuleValidation#readme
          
          ---
          **Action is ready for production use across all PowerShell modules! 🎉**
          "@
          Write-Output $summary >> $env:GITHUB_STEP_SUMMARY
