name: 🧪 Test K.Actions.PSModuleValidation

on:
  push:
    branches: [ main, master, develop, feature/*, bugfix/*, refactor/* ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
  workflow_call:
    outputs:
      test-success:
        description: 'Whether all tests passed'
        value: ${{ jobs.action-test.outputs.test-success }}
      validation-success:
        description: 'Whether validation completed successfully'
        value: ${{ jobs.action-test.outputs.validation-success }}

jobs:
  action-test:
    name: 🎯 Test Action Integration 
    runs-on: ubuntu-latest
    outputs:
      test-success: ${{ steps.evaluate.outputs.test-success }}
      validation-success: ${{ steps.evaluate.outputs.validation-success }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Test 1: Input Validation - Does the action handle different input combinations?
      - name: 📥 Test Input Validation
        id: test-inputs
        shell: pwsh
        run: |
          Write-Host "🧪 Testing Action Input Processing..." -ForegroundColor Cyan
          
          # Test action.yml structure (basic validation)
          $actionContent = Get-Content './action.yml' -Raw
          
          # Check for required sections in YAML
          $requiredSections = @('name:', 'description:', 'inputs:', 'outputs:', 'runs:')
          $sectionsFound = 0
          
          foreach ($section in $requiredSections) {
              if ($actionContent -match $section) {
                  Write-Host "✅ Found section: $section" -ForegroundColor Green
                  $sectionsFound++
              } else {
                  Write-Host "❌ Missing section: $section" -ForegroundColor Red
              }
          }
          
          # Count inputs by looking for input definitions
          $inputMatches = [regex]::Matches($actionContent, '^\s+[a-zA-Z0-9-]+:\s*$', [System.Text.RegularExpressions.RegexOptions]::Multiline)
          $inputsInInputsSection = ($actionContent -split 'inputs:')[1] -split 'outputs:'
          if ($inputsInInputsSection.Count -gt 1) {
              $inputSection = $inputsInInputsSection[0]
              $inputCount = ([regex]::Matches($inputSection, '^\s+[a-zA-Z0-9-]+:\s*$', [System.Text.RegularExpressions.RegexOptions]::Multiline)).Count
              Write-Host "✅ Found $inputCount defined inputs" -ForegroundColor Green
          }
          
          if ($sectionsFound -eq $requiredSections.Count) {
              Write-Host "✅ Action metadata validation passed" -ForegroundColor Green
              Write-Output "input-validation=success" >> $env:GITHUB_OUTPUT
          } else {
              Write-Host "❌ Action metadata validation failed" -ForegroundColor Red
              Write-Output "input-validation=failure" >> $env:GITHUB_OUTPUT
          }

      # Test 2: Action Execution - Does the action run without crashing?
      - name: 🚀 Test Action Execution
        id: test-execution
        uses: ./
        with:
          test-path: './.github'  # Use existing directory with no tests
          validate-all-codebase: 'false'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          module-name: 'ActionIntegrationTest'
        continue-on-error: true

      # Test 3: Output Validation - Does the action set expected outputs?
      - name: 📤 Test Output Validation
        id: test-outputs
        shell: pwsh
        run: |
          Write-Host "🧪 Testing Action Output Generation..." -ForegroundColor Cyan
          
          # Check if action ran
          $executionOutcome = '${{ steps.test-execution.outcome }}'
          Write-Host "Action execution outcome: $executionOutcome" -ForegroundColor Gray
          
          # Check expected outputs (based on action.yml)
          $testSuccess = '${{ steps.test-execution.outputs.test-success }}'
          $hasPesterTests = '${{ steps.test-execution.outputs.has-pester-tests }}'
          $totalTests = '${{ steps.test-execution.outputs.total-tests }}'
          $passedTests = '${{ steps.test-execution.outputs.passed-tests }}'
          $failedTests = '${{ steps.test-execution.outputs.failed-tests }}'
          $coveragePercent = '${{ steps.test-execution.outputs.coverage-percentage }}'
          
          # Count how many outputs were set
          $outputsFound = 0
          $outputs = @{
              'test-success' = $testSuccess
              'has-pester-tests' = $hasPesterTests
              'total-tests' = $totalTests
              'passed-tests' = $passedTests
              'failed-tests' = $failedTests
              'coverage-percentage' = $coveragePercent
          }
          
          foreach ($output in $outputs.Keys) {
              $value = $outputs[$output]
              if ($value -and $value -ne '') {
                  Write-Host "✅ Output '$output': $value" -ForegroundColor Green
                  $outputsFound++
              } else {
                  Write-Host "⚠️ Output '$output': Not set" -ForegroundColor Yellow
              }
          }
          
          $outputSuccess = $outputsFound -gt 0
          Write-Host "📊 Found $outputsFound out of $($outputs.Count) expected outputs" -ForegroundColor Cyan
          
          Write-Output "output-validation=$(if ($outputSuccess) { 'success' } else { 'failure' })" >> $env:GITHUB_OUTPUT
          Write-Output "outputs-found=$outputsFound" >> $env:GITHUB_OUTPUT

      # Test 4: Artifact Validation - Are artifacts created as expected?
      - name: 📄 Test Artifact Generation
        id: test-artifacts
        shell: pwsh
        run: |
          Write-Host "🧪 Testing Artifact Generation..." -ForegroundColor Cyan
          
          # Check for expected artifacts
          $expectedFiles = @(
              './TestResults.xml'
          )
          
          $artifactsFound = 0
          foreach ($file in $expectedFiles) {
              if (Test-Path $file) {
                  $size = (Get-Item $file).Length
                  Write-Host "✅ Artifact found: $file ($size bytes)" -ForegroundColor Green
                  $artifactsFound++
              } else {
                  Write-Host "⚠️ Artifact missing: $file" -ForegroundColor Yellow
              }
          }
          
          Write-Host "📊 Found $artifactsFound/$($expectedFiles.Count) expected artifacts" -ForegroundColor Cyan
          
          Write-Output "artifact-validation=$(if ($artifactsFound -gt 0) { 'success' } else { 'partial' })" >> $env:GITHUB_OUTPUT
          Write-Output "artifacts-found=$artifactsFound" >> $env:GITHUB_OUTPUT

      # Test 5: GitHub Integration - Are summaries and step outputs working?
      - name: 📋 Test GitHub Integration
        id: test-github
        shell: pwsh
        run: |
          Write-Host "🧪 Testing GitHub Integration Features..." -ForegroundColor Cyan
          
          # Check if step summary was generated (file exists)
          $summaryGenerated = Test-Path $env:GITHUB_STEP_SUMMARY
          Write-Host "Step Summary: $(if ($summaryGenerated) { '✅ Generated' } else { '❌ Missing' })" -ForegroundColor $(if ($summaryGenerated) { 'Green' } else { 'Red' })
          
          # Test environment variables
          $requiredEnvVars = @('GITHUB_WORKSPACE', 'GITHUB_REPOSITORY', 'GITHUB_SHA')
          $envVarsOk = $true
          foreach ($var in $requiredEnvVars) {
              $value = [Environment]::GetEnvironmentVariable($var)
              if ($value) {
                  Write-Host "✅ $var: Available" -ForegroundColor Green
              } else {
                  Write-Host "❌ $var: Missing" -ForegroundColor Red
                  $envVarsOk = $false
              }
          }
          
          $githubIntegration = $summaryGenerated -and $envVarsOk
          Write-Output "github-integration=$(if ($githubIntegration) { 'success' } else { 'failure' })" >> $env:GITHUB_OUTPUT

      # Evaluate all test results
      - name: 📊 Evaluate Integration Tests
        id: evaluate
        shell: pwsh
        run: |
          Write-Host "📊 Evaluating integration test results..." -ForegroundColor Cyan
          
          # Collect all test results
          $inputValidation = '${{ steps.test-inputs.outputs.input-validation }}'
          $executionOutcome = '${{ steps.test-execution.outcome }}'
          $outputValidation = '${{ steps.test-outputs.outputs.output-validation }}'
          $artifactValidation = '${{ steps.test-artifacts.outputs.artifact-validation }}'
          $githubIntegration = '${{ steps.test-github.outputs.github-integration }}'
          
          Write-Host "Integration Test Results:" -ForegroundColor Cyan
          Write-Host "  📥 Input Validation: $inputValidation" -ForegroundColor Gray
          Write-Host "  🚀 Action Execution: $executionOutcome" -ForegroundColor Gray
          Write-Host "  📤 Output Validation: $outputValidation" -ForegroundColor Gray
          Write-Host "  📄 Artifact Generation: $artifactValidation" -ForegroundColor Gray
          Write-Host "  📋 GitHub Integration: $githubIntegration" -ForegroundColor Gray
          
          # Core validation: Action must not crash
          $validationSuccess = $executionOutcome -ne 'failure'
          
          # Overall success: All integration tests should pass
          $testSuccess = ($inputValidation -eq 'success') -and
                        ($executionOutcome -eq 'success') -and
                        ($outputValidation -eq 'success') -and
                        ($artifactValidation -in @('success', 'partial')) -and
                        ($githubIntegration -eq 'success')
          
          Write-Output "test-success=$testSuccess" >> $env:GITHUB_OUTPUT
          Write-Output "validation-success=$validationSuccess" >> $env:GITHUB_OUTPUT
          
          if ($testSuccess) {
              Write-Host "✅ All integration tests passed!" -ForegroundColor Green
          } elseif ($validationSuccess) {
              Write-Host "⚠️ Action works but some integration features need attention" -ForegroundColor Yellow
          } else {
              Write-Host "❌ Action integration validation failed" -ForegroundColor Red
              exit 1
          }

      # Generate comprehensive test summary
      - name: 📋 Generate Integration Test Summary
        if: always()
        shell: pwsh
        run: |
          $testSuccess = '${{ steps.evaluate.outputs.test-success }}'
          $validationSuccess = '${{ steps.evaluate.outputs.validation-success }}'
          
          # Collect all test results
          $inputValidation = '${{ steps.test-inputs.outputs.input-validation }}'
          $executionOutcome = '${{ steps.test-execution.outcome }}'
          $outputValidation = '${{ steps.test-outputs.outputs.output-validation }}'
          $outputsFound = '${{ steps.test-outputs.outputs.outputs-found }}'
          $artifactValidation = '${{ steps.test-artifacts.outputs.artifact-validation }}'
          $artifactsFound = '${{ steps.test-artifacts.outputs.artifacts-found }}'
          $githubIntegration = '${{ steps.test-github.outputs.github-integration }}'
          
          $statusIcon = if ($testSuccess -eq 'true') { '✅' } else { '⚠️' }
          $validationIcon = if ($validationSuccess -eq 'true') { '✅' } else { '❌' }
          
          # Function to get status icon
          function Get-TestIcon($status) {
              switch ($status) {
                  'success' { return '✅' }
                  'partial' { return '⚠️' }
                  'failure' { return '❌' }
                  default { return '❓' }
              }
          }
          
          $summary = @"
          ## 🧪 K.Actions.PSModuleValidation Integration Tests $statusIcon
          
          ### Test Summary
          **Status:** $validationIcon **$(if ($validationSuccess -eq 'true') { 'PASSED' } else { 'FAILED' })**
          **Integration:** $statusIcon **$(if ($testSuccess -eq 'true') { 'COMPLETE' } else { 'PARTIAL' })**
          
          ### Integration Test Results
          | Test Category | Status | Details |
          |---------------|--------|---------|
          | 📥 Input Validation | $(Get-TestIcon $inputValidation) | Action metadata and input processing |
          | 🚀 Action Execution | $(Get-TestIcon $executionOutcome) | Core action functionality without crashes |
          | 📤 Output Generation | $(Get-TestIcon $outputValidation) | GitHub Actions outputs ($outputsFound outputs found) |
          | 📄 Artifact Creation | $(Get-TestIcon $artifactValidation) | Test results and file artifacts ($artifactsFound files) |
          | 📋 GitHub Integration | $(Get-TestIcon $githubIntegration) | Step summaries and environment integration |
          
          ### What Was Tested
          - ✅ **Action Structure** - Proper action.yml format and required sections
          - ✅ **Input Processing** - Action handles various input combinations
          - ✅ **Execution Stability** - Action runs without critical failures
          - ✅ **Output Generation** - GitHub Actions outputs are properly set
          - ✅ **Artifact Management** - Test results files are created
          - ✅ **GitHub Features** - Step summaries and environment integration
          
          ### What Was NOT Tested
          - ❌ **PowerShell Logic** - K.PSGallery modules have their own tests
          - ❌ **Test Scenarios** - Business logic is tested in PowerShell module tests
          - ❌ **External Dependencies** - GitLeaks, Super-Linter tested independently
          
          ---
          **Focus:** This validates GitHub Actions integration, not PowerShell business logic.
          **$(if ($testSuccess -eq 'true') { 'Action is ready for production! 🚀' } else { 'Action needs integration fixes before production use. ⚠️' })**
          "@
          Write-Output $summary >> $env:GITHUB_STEP_SUMMARY

      # Upload integration test artifacts
      - name: 📄 Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            ./TestResults.xml
            ./action.yml
          retention-days: 7
