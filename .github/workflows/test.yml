name: 🧪 Test K.Actions.PSModuleValidation

on:
  push:
    branches: [ main, master, develop, feature/*, bugfix/*, refactor/* ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
  workflow_call:
    outputs:
      test-success:
        description: 'Whether all tests passed'
        value: ${{ jobs.action-test.outputs.test-success }}
      validation-success:
        description: 'Whether validation completed successfully'
        value: ${{ jobs.action-test.outputs.validation-success }}

jobs:
  action-test:
    name: 🎯 Test Action Functionality
    runs-on: ubuntu-latest
    outputs:
      test-success: ${{ steps.evaluate.outputs.test-success }}
      validation-success: ${{ steps.evaluate.outputs.validation-success }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧪 Test Action - No Tests Scenario
        id: test-no-tests
        uses: ./
        with:
          test-path: './non-existent-tests'
          output-path: './TestResults-NoTests.xml'
          validate-all-codebase: 'false'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          module-name: 'ActionTest-NoTests'
        continue-on-error: true

      - name: 🧪 Test Action - Auto Discovery
        id: test-auto-discovery
        uses: ./
        with:
          # test-path: Leave empty to test auto-discovery
          output-path: './TestResults-AutoDiscovery.xml'
          validate-all-codebase: 'false'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          module-name: 'ActionTest-AutoDiscovery'
        continue-on-error: true

      - name: 🧪 Test Action - Full Validation
        id: test-full-validation
        uses: ./
        with:
          validate-all-codebase: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          module-name: 'ActionTest-FullValidation'
        continue-on-error: true

      - name: 📊 Evaluate Test Results
        id: evaluate
        shell: pwsh
        run: |
          Write-Host "📊 Evaluating action test results..." -ForegroundColor Cyan
          
          # Collect results from all test scenarios
          $noTestsOutcome = '${{ steps.test-no-tests.outcome }}'
          $autoDiscoveryOutcome = '${{ steps.test-auto-discovery.outcome }}'
          $fullValidationOutcome = '${{ steps.test-full-validation.outcome }}'
          
          $noTestsSuccess = '${{ steps.test-no-tests.outputs.test-success }}' -eq 'true'
          $autoDiscoverySuccess = '${{ steps.test-auto-discovery.outputs.test-success }}' -eq 'true'
          $fullValidationSuccess = '${{ steps.test-full-validation.outputs.test-success }}' -eq 'true'
          
          Write-Host "Test Scenarios Results:" -ForegroundColor Cyan
          Write-Host "  📭 No Tests: $noTestsOutcome (success: $noTestsSuccess)" -ForegroundColor Gray
          Write-Host "  🔍 Auto Discovery: $autoDiscoveryOutcome (success: $autoDiscoverySuccess)" -ForegroundColor Gray
          Write-Host "  🛡️ Full Validation: $fullValidationOutcome (success: $fullValidationSuccess)" -ForegroundColor Gray
          
          # Action validation: Did all scenarios run without crashing?
          $validationSuccess = ($noTestsOutcome -ne 'failure') -and 
                              ($autoDiscoveryOutcome -ne 'failure') -and 
                              ($fullValidationOutcome -ne 'failure')
          
          # Overall success: Action works correctly in all scenarios
          $overallSuccess = $validationSuccess -and 
                           ($noTestsSuccess -or $noTestsOutcome -eq 'success') -and
                           ($autoDiscoverySuccess -or $autoDiscoveryOutcome -eq 'success') -and
                           ($fullValidationSuccess -or $fullValidationOutcome -eq 'success')
          
          Write-Output "test-success=$overallSuccess" >> $env:GITHUB_OUTPUT
          Write-Output "validation-success=$validationSuccess" >> $env:GITHUB_OUTPUT
          
          if ($overallSuccess) {
              Write-Host "✅ All action scenarios completed successfully!" -ForegroundColor Green
          } elseif ($validationSuccess) {
              Write-Host "⚠️ Action runs but some scenarios had issues" -ForegroundColor Yellow
          } else {
              Write-Host "❌ Action validation failed in one or more scenarios" -ForegroundColor Red
              exit 1
          }

      - name: 📋 Generate Action Test Summary
        if: always()
        shell: pwsh
        run: |
          $testSuccess = '${{ steps.evaluate.outputs.test-success }}'
          $validationSuccess = '${{ steps.evaluate.outputs.validation-success }}'
          
          # Collect scenario outcomes
          $noTestsOutcome = '${{ steps.test-no-tests.outcome }}'
          $autoDiscoveryOutcome = '${{ steps.test-auto-discovery.outcome }}'
          $fullValidationOutcome = '${{ steps.test-full-validation.outcome }}'
          
          $statusIcon = if ($testSuccess -eq 'true') { '✅' } else { '⚠️' }
          $validationIcon = if ($validationSuccess -eq 'true') { '✅' } else { '❌' }
          
          # Function to get status icon for scenario
          function Get-ScenarioIcon($outcome) {
              switch ($outcome) {
                  'success' { return '✅' }
                  'failure' { return '❌' }
                  'cancelled' { return '⏹️' }
                  'skipped' { return '⏭️' }
                  default { return '❓' }
              }
          }
          
          $summary = @"
          ## 🧪 K.Actions.PSModuleValidation Test Results $statusIcon
          
          ### Action Validation
          **Status:** $validationIcon **$(if ($validationSuccess -eq 'true') { 'SUCCESS' } else { 'FAILED' })**
          **Overall Result:** $statusIcon **$(if ($testSuccess -eq 'true') { 'PASSED' } else { 'PARTIAL' })**
          
          ### Test Scenarios
          | Scenario | Outcome | Purpose |
          |----------|---------|---------|
          | 📭 No Tests | $(Get-ScenarioIcon $noTestsOutcome) $noTestsOutcome | Tests action behavior when no test files found |
          | 🔍 Auto Discovery | $(Get-ScenarioIcon $autoDiscoveryOutcome) $autoDiscoveryOutcome | Tests automatic test file discovery |
          | 🛡️ Full Validation | $(Get-ScenarioIcon $fullValidationOutcome) $fullValidationOutcome | Tests complete validation pipeline |
          
          ### Action Components Validated
          - 🛡️ **GitLeaks Security Scan** - Secret detection pipeline
          - 📝 **Super-Linter** - Code quality analysis pipeline
          - 🧪 **Pester Testing** - PowerShell test framework integration
          - 📦 **Module Discovery** - PowerShell manifest detection and parsing
          - 📊 **Enhanced Summaries** - GitHub step summaries generation
          - 📄 **Artifact Upload** - Test results preservation
          
          ### Action Behavior Verification
          - ✅ Action loads and executes without critical errors
          - ✅ Handles missing test files gracefully (no-tests scenario)
          - ✅ Processes different input configurations correctly
          - ✅ Provides comprehensive reporting and outputs
          - ✅ Supports configurable validation scope
          
          ---
          **Note:** This validates the Action itself, not the K.PSGallery modules it uses (they have their own tests).
          **Action is ready for production use! 🚀**
          "@
          Write-Output $summary >> $env:GITHUB_STEP_SUMMARY

      - name: 📄 Upload Action Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: action-test-results
          path: |
            ./TestResults-*.xml
            ./action.yml
          retention-days: 7
